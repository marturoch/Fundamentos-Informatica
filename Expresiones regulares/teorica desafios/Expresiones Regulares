EXPRESIONES REGULARES (Clase 3 teorica)

3. Metacaracteres

Para pensar 🤔: Dado el siguiente texto:
texto = 'Esta es la linea uno\npalabra en la línea dos\n'
¿Cómo crees que darán las siguientes búsquedas? vamos a ver el patrón/substring “palabra”, 
expresión regular a: '^palabra' → "palabra" al inicio de línea →  True
expresión regular b: '\Apalabra'→ "palabra" al inicio de texto → False
expresión regular c: 'palabra$'→ "palabra" al fin de linea → False
expresión regular d: 'palabra\Z'→ "palabra" al fin de texto → False

Para pensar 🤔:¿Qué significará la expresión regular "X(.*)Y"? Ennumera algunas de las posibles strings que cumplen con dicha condición.
Todas las ocurrencias de algun substring que aparezca entre X y Y, incluyendolos. Desde la primer X en el string hasta la ultima Y en el string, aunque haya una X o una Y en el medio.
X

🧗‍♀️ Desafío I: ¿Construí la expresión regular que obtenga al menos 4 dígitos?
\d{4,} o [0-9]{4,} 

🧗‍♀️ Desafío II: ¿Construí la expresión regular que obtenga al entre 3 y 6 letras minúsculas?
[a-z]{3,6} 

🧗‍♀️ Desafío III: ¿Construí la expresión regular que obtenga todas las apariciones del patrón ab en un string?
(ab)* 
Para pensar 🤔: ¿Existe una única respuesta para los ejercicios? ¿Qué otras alternativas se te ocurren? No, hay mas alternativas. Las puse arriba.

🧗‍♀️Desafio IV: ¿Qué expresión regular usarías para extraer el número de estudiantes que hay en una clase según el siguiente texto:
texto = 'En la clase de Introducción a la programación hay 30 estudiantes'
\d+ o [0-9]

4. Expresiones regulares en Python(ningun desafio)

5. Coincidencias o Matches
>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
>>> patron = "amet"
>>> re.search(patron, texto)
Para pensar 🤔: ¿Qué resultado obtenemos al ejecutar en la última linea?
<re.Match object; span=(22, 26), match='amet'>

🧗‍♀️Desafio V: imprimí el fragmento del texto entre la posición 22 y 26 ¿Qué resultado obtenés? ¿Qué quiere decir el mensaje span?
>>> texto[22:26]
'amet'
span nos da la ubicacion del objeto de coincidencia. Incluye el primer numero y el ultimo no. 

>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
>>> patron = "amet"
>>> re.match(patron, texto)
Para pensar 🤔: ¿Qué resultado obtenemos con search()?¿Qué diferencias observan con match()?
Match busca el patron y devuelve la primera apricion solo si esta al principio de la cadena. Si encuentra la concidencia en la primer linea devuelve el objeto de concidencia pero si ecuentra en alguna otra linea devuelve un valor nulo.
En cambio, search busca el patron en la cadena y devuelve el objeto de coincidencia cuando se encuentra el patron. Si no lo encuentra devuelve None. No tiene que estar en la primer linea.

>>> import re
>>> texto = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Amet et amet."
>>> patron = "amet"
>>> re.search(patron, texto).group() 
Para pensar 🤔: ¿Qué resultado obtenemos? ¿Para qué sirve la función group()?
'amet'
group() sirve para convertir el objeto del search a un string. Muestra el resultado de una busqueda. Nos devuelve la coincidencia. 

🧗‍♀️Desafio VI: Expresá el patrón de búsqueda utilizando lo visto anteriormente sobre metacaracteres y rangos.
>>>patron = "(a{1}m{1}e{1}t{1})"
>>>re.search(patron, texto)
['amet', 'amet']

6.Reemplazos o sustitutciones masivas

>>>re.sub(patron, "###", texto)
Para pensar 🤔: ¿Qué resultado obtenemos? ¿Para qué sirve la función sub?
>>> texto = "Lorem ipsum dolor sit ###, consectetur adipiscing elit. Amet et ###."
sub permite reemplazar todos las ocurrencias del patrón por otro patrón en un String.

